{"name":"Django-dynamic-fixture","tagline":"Migrated from http://code.google.com/p/django-dynamic-fixture and https://bitbucket.org/paulocheque/django-dynamic-fixture","body":"Django Dynamic Fixture\r\n-----------\r\n\r\n![Continuous Integration Status](https://secure.travis-ci.org/paulocheque/django-dynamic-fixture.png)\r\n\r\nA complete library to create dynamic model instances for testing purposes.\r\n\r\n  * [Motivation](#motivation)\r\n  * [Basic Example of Usage](#basic-example-of-usage)\r\n  * [Installation](#installation)\r\n  * [Documentation](https://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation)\r\n  * **Django Dynamic Fixture**\r\n    * [Get function (G)](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-g)\r\n    * [New function (N)](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-n)\r\n    * [Fixture function (F)](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-f)\r\n    * [Many To Many Fields](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-m2m)\r\n    * [Django Look Up fields](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-django_syntax)\r\n  * **Data generation options**\r\n    * [Data Fixtures](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-data_fixtures)\r\n    * [Custom Fields](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-custom_fields)\r\n    * [Fill Nullable Fields](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-fill_nullable_fields)\r\n    * [Ignoring Fields](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-ignoring_fields)\r\n    * [Number of Laps](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-number_of_laps)\r\n    * [Copier](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-copier)\r\n    * [Default Shelve](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-default_shelve)\r\n    * [Named Shelve](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-named_shelve)\r\n  * **Other configurations**\r\n    * [Validate Models](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-validate_models)\r\n    * [Validate Arguments](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-validate_arguments)\r\n    * [Signals PRE_SAVE and POST_SAVE](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-signals)\r\n  * **Debugging**\r\n    * [Print function (P)](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-p)\r\n    * [Debug Mode](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-debug_mode)\r\n    * [List of Exceptions](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-exceptions)\r\n  * **Other goodies**\r\n    * [Decorators](#decorators)\r\n    * [FileSystemDjangoTestCase](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-filesystem)\r\n    * [DDF Setup Nose Plugin](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-setup_nose_plugin)\r\n    * [Queries Nose Plugin](http://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation#wiki-queries_nose_plugin)\r\n  * **Other Links**\r\n    * [Comparison with another fixture tools](#comparison-with-another-fixture-tools)\r\n    * [Features](#features)\r\n    * [Other goodies](#other-goodies)\r\n    * [Documentation Links](#documentation-links)\r\n    * [FAQ](#faq)\r\n    * [Travis](http://travis-ci.org/#!/paulocheque/django-dynamic-fixture)\r\n\r\n\r\n\r\n\r\n# Motivation\r\n  * It is a TERRIBLE practice to use STATIC data in tests.\r\n  * Create dynamic fixture for each model is boring and it produces a lot of replicated code.\r\n  * It is a bad idea to use uncontrolled data in tests, like bizarre random data.\r\n\r\n# Basic Example of Usage\r\n\r\n```python\r\nfrom django.db import models\r\n\r\nclass Author(models.Model):\r\n    name = models.CharField(max_length=255)\r\n\r\nclass Book(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    authors = models.ManyToManyField(Author)\r\n```\r\n\r\n```python\r\nfrom django.test import TestCase\r\nfrom django_dynamic_fixture import G\r\n\r\nclass SearchingBooks(TestCase):\r\n    def test_search_book_by_author(self):\r\n        author1 = G(Author)\r\n        author2 = G(Author)\r\n        book1 = G(Book, authors=[author1])\r\n        book2 = G(Book, authors=[author2])\r\n        books = Book.objects.search_by_author(author1.name)\r\n        self.assertTrue(book1 in books)\r\n        self.assertTrue(book2 not in books)\r\n```\r\n\r\nInstallation\r\n------------\r\n\r\n```\r\npip install django-dynamic-fixture\r\n```\r\n\r\n#### or\r\n\r\n```\r\n1. Download zip file\r\n2. Extract it\r\n3. Execute in the extracted directory: python setup.py install\r\n```\r\n\r\n#### Development version\r\n\r\n```\r\npip install -e git+git@github.com:paulocheque/django-dynamic-fixture.git#egg=django-dynamic-fixture\r\n```\r\n\r\n#### requirements.txt\r\n\r\n```\r\ndjango-dynamic-fixture==1.6.5\r\n# or use the development version\r\ngit+git://github.com/paulocheque/django-dynamic-fixture.git#egg=django-dynamic-fixture\r\n```\r\n\r\n#### Upgrade:\r\n\r\n```\r\npip install django-dynamic-fixture --upgrade --no-deps\r\n```\r\n\r\n#### Requirements\r\n\r\n* Python 2.6 or 2.7\r\n* Django 1.2, 1.3 or 1.4\r\n\r\n# Comparison with another fixture tools\r\n  * We tried to use another fixture tools in a big Django project but the experience was not satisfactory.\r\n  * Either they are incomplete, or bugged or it produces erratic tests, because they use random and uncontrolled data.\r\n  * Also, the syntax of others tools is too verbose, which polutes the tests.\r\n  * Complete, lean and practice documentation.\r\n  * It is hard to debug tests with another tools.\r\n  * List of other tools: <http://djangopackages.com/grids/g/fixtures>\r\n  * The core of the tool is the algorithm, it is not the data generation as all other tools. That mean you can change the data generation logic as you want.\r\n\r\n# Features\r\n  * Highly customizable: you can customize fields recursively\r\n  * Deal with unique=True\r\n  * Deal with cyclic dependencies (including self references)\r\n  * Deal with many to many relationship (common M2M or M2M with additional data, i.e. through='table')\r\n  * Deal with custom fields (specially if the custom field inherit of a django field)\r\n  * It is supported for parallel tests\r\n  * Deal with auto calculated attributes\r\n  * It is easy to debug errors\r\n\r\n# Other goodies\r\n  * Nose plugin that enable a setup for the entire suite (unittest2 includes only setups for class and module)\r\n  * Nose plugin to count how many queries are executed by test\r\n  * Command to count how many queries are executed to save any kind of model instance\r\n  * FileSystemDjangoTestCase that facilitate to create tests for features that use filesystem.\r\n\r\n# Documentation links\r\n\r\n  * Simple documentation: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Simple-Documentation>\r\n  * Full documentation: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation>\r\n  * Examples of Usage: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Example-of-usage>\r\n  * Patterns and Anti-patterns: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Patterns-and-Anti-Patterns>\r\n  * Wiki: <https://github.com/paulocheque/django-dynamic-fixture/wiki>\r\n\r\n# FAQ\r\n\r\n  * http://stackoverflow.com/questions/12487337/optimizing-setup-and-teardown-for-sample-django-model-using-django-nose-and-djan\r\n  * http://stackoverflow.com/questions/4400609/initial-data-fixture-management-in-django\r\n","google":"UA-30621911-1","note":"Don't delete this file! It's used internally to help with page regeneration."}