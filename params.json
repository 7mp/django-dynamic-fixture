{"name":"Django-dynamic-fixture","body":"Django Dynamic Fixture\r\n-----------\r\n\r\n![Continuous Integration Status](https://secure.travis-ci.org/paulocheque/django-dynamic-fixture.png?branch=master)\r\n\r\nA full and popular (more than 10.000 downloads) library to create dynamic model instances for testing purposes.\r\n\r\nInstallation\r\n------------\r\n\r\n#### Lastest Release: 1.6.3\r\n\r\n```\r\npip install django-dynamic-fixture\r\n```\r\n\r\n#### or\r\n\r\n```\r\n1. Download zip file \r\n2. Extract it\r\n3. Execute in the extracted directory: python setup.py install\r\n```\r\n\r\n#### Upgrade:\r\n\r\n```\r\npip install django-dynamic-fixture --upgrade --no-deps\r\n```\r\n\r\n#### Requirements\r\n\r\n* Python 2.6 or 2.7\r\n* Django 1.2, 1.3 or 1.4\r\n\r\n# Motivation\r\n  * It is a TERRIBLE practice to use STATIC data in tests. \r\n  * Create dynamic fixture for each model is boring and it produces a lot of replicated code.\r\n  * It is a bad idea to use uncontrolled data in tests, like bizarre random data.\r\n\r\n# Comparison with another fixture tools\r\n  * We tried to use another fixture tools in a big Django project but the experience was not satisfactory. \r\n  * Either they are incomplete, or bugged or it produces erratic tests, because they use random and uncontrolled data.\r\n  * Also, the syntax of others tools is too verbose, which polutes the tests.\r\n  * Complete, lean and practice documentation.\r\n  * It is hard to debug tests with another tools.\r\n  * List of other tools: <http://djangopackages.com/grids/g/fixtures>\r\n\r\n# Features\r\n  * Highly customizable: you can customize fields recursively\r\n  * Deal with unique=True\r\n  * Deal with cyclic dependencies (including self references)\r\n  * Deal with many to many relationship (common M2M or M2M with additional data, i.e. through='table')\r\n  * Deal with custom fields (specially if the custom field inherit of a django field)\r\n  * It is supported for parallel tests\r\n  * Deal with auto calculated attributes\r\n  * It is easy to debug errors\r\n\r\n# Other goodies\r\n  * Nose plugin that enable a setup for the entire suite (unittest2 includes only setups for class and module)\r\n  * Nose plugin to count how many queries are executed by test\r\n  * Command to count how many queries are executed to save any kind of model instance\r\n  * FileSystemDjangoTestCase that facilitate to create tests for features that use filesystem.\r\n\r\n# Basic Example of Usage\r\n\r\n```python\r\nfrom django.db import models\r\n\r\nclass Author(models.Model):\r\n    name = models.CharField(max_length=255)\r\n\r\nclass Book(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    authors = models.ManyToManyField(Author)\r\n```\r\n\r\n```python\r\nfrom django.test import TestCase\r\nfrom django_dynamic_fixture import G\r\n\r\nclass SearchingBooks(TestCase):\r\n    def test_search_book_by_author(self):\r\n        author1 = G(Author)\r\n        author2 = G(Author)\r\n        book1 = G(Book, authors=[author1])\r\n        book2 = G(Book, authors=[author2])\r\n        books = Book.objects.search_by_author(author1.name)\r\n        self.assertTrue(book1 in books)\r\n        self.assertTrue(book2 not in books)\r\n```\r\n\r\n# Links\r\n\r\n  * Simple documentation: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Simple-Documentation>\r\n  * Full documentation: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Documentation>\r\n  * Examples of Usage: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Example-of-usage>\r\n  * Patterns and Anti-patterns: <https://github.com/paulocheque/django-dynamic-fixture/wiki/Patterns-and-Anti-Patterns>\r\n  * Wiki: <https://github.com/paulocheque/django-dynamic-fixture/wiki>\r\n","tagline":"Migrated from http://code.google.com/p/django-dynamic-fixture and https://bitbucket.org/paulocheque/django-dynamic-fixture","google":"UA-30621911-1","note":"Don't delete this file! It's used internally to help with page regeneration."}